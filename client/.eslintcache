[{"D:\\diplom\\client\\src\\index.js":"1","D:\\diplom\\client\\src\\App.js":"2","D:\\diplom\\client\\src\\store\\UserStore.js":"3","D:\\diplom\\client\\src\\store\\DeviceStore.js":"4","D:\\diplom\\client\\src\\components\\NavBar.js":"5","D:\\diplom\\client\\src\\components\\AppRouter.js":"6","D:\\diplom\\client\\src\\http\\userAPI.js":"7","D:\\diplom\\client\\src\\routes.js":"8","D:\\diplom\\client\\src\\http\\index.js":"9","D:\\diplom\\client\\src\\utils\\consts.js":"10","D:\\diplom\\client\\src\\pages\\Auth.js":"11","D:\\diplom\\client\\src\\pages\\Shop.js":"12","D:\\diplom\\client\\src\\pages\\Basket.js":"13","D:\\diplom\\client\\src\\pages\\DevicePage.js":"14","D:\\diplom\\client\\src\\pages\\Admin.js":"15","D:\\diplom\\client\\src\\http\\deviceAPI.js":"16","D:\\diplom\\client\\src\\components\\Pages.js":"17","D:\\diplom\\client\\src\\components\\DeviceList.js":"18","D:\\diplom\\client\\src\\components\\BrandBar.js":"19","D:\\diplom\\client\\src\\components\\TypeBar.js":"20","D:\\diplom\\client\\src\\components\\modals\\CreateDevice.js":"21","D:\\diplom\\client\\src\\components\\modals\\CreateBrand.js":"22","D:\\diplom\\client\\src\\components\\modals\\CreateType.js":"23","D:\\diplom\\client\\src\\components\\DeviceItem.js":"24"},{"size":439,"mtime":1611985807000,"results":"25","hashOfConfig":"26"},{"size":1012,"mtime":1683910309532,"results":"27","hashOfConfig":"26"},{"size":544,"mtime":1683908169544,"results":"28","hashOfConfig":"26"},{"size":1298,"mtime":1611985807000,"results":"29","hashOfConfig":"26"},{"size":1937,"mtime":1683907724713,"results":"30","hashOfConfig":"26"},{"size":967,"mtime":1683907718691,"results":"31","hashOfConfig":"26"},{"size":694,"mtime":1683910176025,"results":"32","hashOfConfig":"26"},{"size":870,"mtime":1683907480438,"results":"33","hashOfConfig":"26"},{"size":407,"mtime":1611985807000,"results":"34","hashOfConfig":"26"},{"size":228,"mtime":1611985807000,"results":"35","hashOfConfig":"26"},{"size":3272,"mtime":1683910304240,"results":"36","hashOfConfig":"26"},{"size":1538,"mtime":1611985807000,"results":"37","hashOfConfig":"26"},{"size":146,"mtime":1611985807000,"results":"38","hashOfConfig":"26"},{"size":2229,"mtime":1611985807000,"results":"39","hashOfConfig":"26"},{"size":1549,"mtime":1611985807000,"results":"40","hashOfConfig":"26"},{"size":995,"mtime":1683908030651,"results":"41","hashOfConfig":"26"},{"size":801,"mtime":1611985807000,"results":"42","hashOfConfig":"26"},{"size":491,"mtime":1611985807000,"results":"43","hashOfConfig":"26"},{"size":759,"mtime":1611985807000,"results":"44","hashOfConfig":"26"},{"size":752,"mtime":1611985807000,"results":"45","hashOfConfig":"26"},{"size":6111,"mtime":1611985807000,"results":"46","hashOfConfig":"26"},{"size":1372,"mtime":1611985807000,"results":"47","hashOfConfig":"26"},{"size":1383,"mtime":1683905794423,"results":"48","hashOfConfig":"26"},{"size":1090,"mtime":1611985807000,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"524p2w",{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"D:\\diplom\\client\\src\\index.js",[],["105","106"],"D:\\diplom\\client\\src\\App.js",["107"],"D:\\diplom\\client\\src\\store\\UserStore.js",[],"D:\\diplom\\client\\src\\store\\DeviceStore.js",[],"D:\\diplom\\client\\src\\components\\NavBar.js",[],"D:\\diplom\\client\\src\\components\\AppRouter.js",[],"D:\\diplom\\client\\src\\http\\userAPI.js",[],"D:\\diplom\\client\\src\\routes.js",[],"D:\\diplom\\client\\src\\http\\index.js",[],"D:\\diplom\\client\\src\\utils\\consts.js",[],"D:\\diplom\\client\\src\\pages\\Auth.js",["108"],"D:\\diplom\\client\\src\\pages\\Shop.js",["109","110"],"import React, {useContext, useEffect} from 'react';\nimport {Container} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport TypeBar from \"../components/TypeBar\";\nimport BrandBar from \"../components/BrandBar\";\nimport DeviceList from \"../components/DeviceList\";\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport {fetchBrands, fetchDevices, fetchTypes} from \"../http/deviceAPI\";\nimport Pages from \"../components/Pages\";\n\nconst Shop = observer(() => {\n    const {device} = useContext(Context)\n\n    useEffect(() => {\n        fetchTypes().then(data => device.setTypes(data))\n        fetchBrands().then(data => device.setBrands(data))\n        fetchDevices(null, null, 1, 2).then(data => {\n            device.setDevices(data.rows)\n            device.setTotalCount(data.count)\n        })\n    }, [])\n\n    useEffect(() => {\n        fetchDevices(device.selectedType.id, device.selectedBrand.id, device.page, 2).then(data => {\n            device.setDevices(data.rows)\n            device.setTotalCount(data.count)\n        })\n    }, [device.page, device.selectedType, device.selectedBrand,])\n\n    return (\n        <Container>\n            <Row className=\"mt-2\">\n                <Col md={3}>\n                    <TypeBar/>\n                </Col>\n                <Col md={9}>\n                    <BrandBar/>\n                    <DeviceList/>\n                    <Pages/>\n                </Col>\n            </Row>\n        </Container>\n    );\n});\n\nexport default Shop;\n","D:\\diplom\\client\\src\\pages\\Basket.js",[],"D:\\diplom\\client\\src\\pages\\DevicePage.js",["111"],"import React, {useEffect, useState} from 'react';\nimport {Button, Card, Col, Container, Image, Row} from \"react-bootstrap\";\nimport bigStar from '../assets/bigStar.png'\nimport {useParams} from 'react-router-dom'\nimport {fetchOneDevice} from \"../http/deviceAPI\";\n\nconst DevicePage = () => {\n    const [device, setDevice] = useState({info: []})\n    const {id} = useParams()\n    useEffect(() => {\n        fetchOneDevice(id).then(data => setDevice(data))\n    }, [])\n\n    return (\n        <Container className=\"mt-3\">\n            <Row>\n                <Col md={4}>\n                    <Image width={300} height={300} src={process.env.REACT_APP_API_URL + device.img}/>\n                </Col>\n                <Col md={4}>\n                    <Row className=\"d-flex flex-column align-items-center\">\n                        <h2>{device.name}</h2>\n                        <div\n                            className=\"d-flex align-items-center justify-content-center\"\n                            style={{background: `url(${bigStar}) no-repeat center center`, width:240, height: 240, backgroundSize: 'cover', fontSize:64}}\n                        >\n                            {device.rating}\n                        </div>\n                    </Row>\n                </Col>\n                <Col md={4}>\n                    <Card\n                        className=\"d-flex flex-column align-items-center justify-content-around\"\n                        style={{width: 300, height: 300, fontSize: 32, border: '5px solid lightgray'}}\n                    >\n                        <h3>От: {device.price} руб.</h3>\n                        <Button variant={\"outline-dark\"}>Добавить в корзину</Button>\n                    </Card>\n                </Col>\n            </Row>\n            <Row className=\"d-flex flex-column m-3\">\n                <h1>Характеристики</h1>\n                {device.info.map((info, index) =>\n                    <Row key={info.id} style={{background: index % 2 === 0 ? 'lightgray' : 'transparent', padding: 10}}>\n                        {info.title}: {info.description}\n                    </Row>\n                )}\n            </Row>\n        </Container>\n    );\n};\n\nexport default DevicePage;\n","D:\\diplom\\client\\src\\pages\\Admin.js",[],"D:\\diplom\\client\\src\\http\\deviceAPI.js",["112"],"import {$authHost, $host} from \"./index\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const createType = async (type) => {\n    const {data} = await $authHost.post('api/type', type)\n    return data\n}\n\nexport const fetchTypes = async () => {\n    const {data} = await $host.get('api/type')\n    return data\n}\n\nexport const createBrand = async (brand) => {\n    const {data} = await $authHost.post('api/brand', brand)\n    return data\n}\n\nexport const fetchBrands = async () => {\n    const {data} = await $host.get('api/brand', )\n    return data\n}\n\nexport const createDevice = async (device) => {\n    const {data} = await $authHost.post('api/device', device)\n    return data\n}\n\nexport const fetchDevices = async (typeId, brandId, page, limit= 5) => {\n    const {data} = await $host.get('api/device', {params: {\n            typeId, brandId, page, limit\n        }})\n    return data\n}\n\nexport const fetchOneDevice = async (id) => {\n    const {data} = await $host.get('api/device/' + id)\n    return data\n}\n","D:\\diplom\\client\\src\\components\\Pages.js",[],"D:\\diplom\\client\\src\\components\\DeviceList.js",[],"D:\\diplom\\client\\src\\components\\BrandBar.js",[],"D:\\diplom\\client\\src\\components\\TypeBar.js",["113"],"import React, {useContext} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport Col from \"react-bootstrap/Col\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nconst TypeBar = observer(() => {\n    const {device} = useContext(Context)\n    return (\n        <ListGroup>\n            {device.types.map(type =>\n                <ListGroup.Item\n                    style={{cursor: 'pointer'}}\n                    active={type.id === device.selectedType.id}\n                    onClick={() => device.setSelectedType(type)}\n                    key={type.id}\n                >\n                    {type.name}\n                </ListGroup.Item>\n            )}\n        </ListGroup>\n    );\n});\n\nexport default TypeBar;\n","D:\\diplom\\client\\src\\components\\modals\\CreateDevice.js",["114","115"],"import React, {useContext, useEffect, useState} from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport {Button, Dropdown, Form, Row, Col} from \"react-bootstrap\";\nimport {Context} from \"../../index\";\nimport {createDevice, fetchBrands, fetchDevices, fetchTypes} from \"../../http/deviceAPI\";\nimport {observer} from \"mobx-react-lite\";\n\nconst CreateDevice = observer(({show, onHide}) => {\n    const {device} = useContext(Context)\n    const [name, setName] = useState('')\n    const [price, setPrice] = useState(0)\n    const [file, setFile] = useState(null)\n    const [info, setInfo] = useState([])\n\n    useEffect(() => {\n        fetchTypes().then(data => device.setTypes(data))\n        fetchBrands().then(data => device.setBrands(data))\n    }, [])\n\n    const addInfo = () => {\n        setInfo([...info, {title: '', description: '', number: Date.now()}])\n    }\n    const removeInfo = (number) => {\n        setInfo(info.filter(i => i.number !== number))\n    }\n    const changeInfo = (key, value, number) => {\n        setInfo(info.map(i => i.number === number ? {...i, [key]: value} : i))\n    }\n\n    const selectFile = e => {\n        setFile(e.target.files[0])\n    }\n\n    const addDevice = () => {\n        const formData = new FormData()\n        formData.append('name', name)\n        formData.append('price', `${price}`)\n        formData.append('img', file)\n        formData.append('brandId', device.selectedBrand.id)\n        formData.append('typeId', device.selectedType.id)\n        formData.append('info', JSON.stringify(info))\n        createDevice(formData).then(data => onHide())\n    }\n\n    return (\n        <Modal\n            show={show}\n            onHide={onHide}\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Добавить устройство\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Dropdown className=\"mt-2 mb-2\">\n                        <Dropdown.Toggle>{device.selectedType.name || \"Выберите тип\"}</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            {device.types.map(type =>\n                                <Dropdown.Item\n                                    onClick={() => device.setSelectedType(type)}\n                                    key={type.id}\n                                >\n                                    {type.name}\n                                </Dropdown.Item>\n                            )}\n                        </Dropdown.Menu>\n                    </Dropdown>\n                    <Dropdown className=\"mt-2 mb-2\">\n                        <Dropdown.Toggle>{device.selectedBrand.name || \"Выберите тип\"}</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            {device.brands.map(brand =>\n                                <Dropdown.Item\n                                    onClick={() => device.setSelectedBrand(brand)}\n                                    key={brand.id}\n                                >\n                                    {brand.name}\n                                </Dropdown.Item>\n                            )}\n                        </Dropdown.Menu>\n                    </Dropdown>\n                    <Form.Control\n                        value={name}\n                        onChange={e => setName(e.target.value)}\n                        className=\"mt-3\"\n                        placeholder=\"Введите название устройства\"\n                    />\n                    <Form.Control\n                        value={price}\n                        onChange={e => setPrice(Number(e.target.value))}\n                        className=\"mt-3\"\n                        placeholder=\"Введите стоимость устройства\"\n                        type=\"number\"\n                    />\n                    <Form.Control\n                        className=\"mt-3\"\n                        type=\"file\"\n                        onChange={selectFile}\n                    />\n                    <hr/>\n                    <Button\n                        variant={\"outline-dark\"}\n                        onClick={addInfo}\n                    >\n                        Добавить новое свойство\n                    </Button>\n                    {info.map(i =>\n                        <Row className=\"mt-4\" key={i.number}>\n                            <Col md={4}>\n                                <Form.Control\n                                    value={i.title}\n                                    onChange={(e) => changeInfo('title', e.target.value, i.number)}\n                                    placeholder=\"Введите название свойства\"\n                                />\n                            </Col>\n                            <Col md={4}>\n                                <Form.Control\n                                    value={i.description}\n                                    onChange={(e) => changeInfo('description', e.target.value, i.number)}\n                                    placeholder=\"Введите описание свойства\"\n                                />\n                            </Col>\n                            <Col md={4}>\n                                <Button\n                                    onClick={() => removeInfo(i.number)}\n                                    variant={\"outline-danger\"}\n                                >\n                                    Удалить\n                                </Button>\n                            </Col>\n                        </Row>\n                    )}\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"outline-danger\" onClick={onHide}>Закрыть</Button>\n                <Button variant=\"outline-success\" onClick={addDevice}>Добавить</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n});\n\nexport default CreateDevice;\n","D:\\diplom\\client\\src\\components\\modals\\CreateBrand.js",["116"],"import React, {useState} from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport {Button, Form} from \"react-bootstrap\";\nimport {createBrand, createType} from \"../../http/deviceAPI\";\n\nconst CreateBrand = ({show, onHide}) => {\n    const [value, setValue] = useState('')\n\n    const addBrand = () => {\n        createBrand({name: value}).then(data => {\n            setValue('')\n            onHide()\n        })\n    }\n    return (\n        <Modal\n            show={show}\n            onHide={onHide}\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Добавить тип\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Control\n                        value={value}\n                        onChange={e => setValue(e.target.value)}\n                        placeholder={\"Введите название типа\"}\n                    />\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"outline-danger\" onClick={onHide}>Закрыть</Button>\n                <Button variant=\"outline-success\" onClick={addBrand}>Добавить</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CreateBrand;\n","D:\\diplom\\client\\src\\components\\modals\\CreateType.js",[],"D:\\diplom\\client\\src\\components\\DeviceItem.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":23,"column":8,"nodeType":"123","endLine":23,"endColumn":10,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":7,"column":22,"nodeType":"127","messageId":"128","endLine":7,"endColumn":33},{"ruleId":"121","severity":1,"message":"129","line":23,"column":8,"nodeType":"123","endLine":23,"endColumn":10,"suggestions":"130"},{"ruleId":"121","severity":1,"message":"129","line":30,"column":8,"nodeType":"123","endLine":30,"endColumn":65,"suggestions":"131"},{"ruleId":"121","severity":1,"message":"132","line":12,"column":8,"nodeType":"123","endLine":12,"endColumn":10,"suggestions":"133"},{"ruleId":"125","severity":1,"message":"134","line":2,"column":8,"nodeType":"127","messageId":"128","endLine":2,"endColumn":18},{"ruleId":"125","severity":1,"message":"135","line":4,"column":8,"nodeType":"127","messageId":"128","endLine":4,"endColumn":11},{"ruleId":"125","severity":1,"message":"136","line":5,"column":36,"nodeType":"127","messageId":"128","endLine":5,"endColumn":48},{"ruleId":"121","severity":1,"message":"129","line":18,"column":8,"nodeType":"123","endLine":18,"endColumn":10,"suggestions":"137"},{"ruleId":"125","severity":1,"message":"138","line":4,"column":22,"nodeType":"127","messageId":"128","endLine":4,"endColumn":32},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["141"],"no-unused-vars","'ADMIN_ROUTE' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'device'. Either include it or remove the dependency array.",["142"],["143"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["144"],"'jwt_decode' is defined but never used.","'Col' is defined but never used.","'fetchDevices' is defined but never used.",["145"],"'createType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"148","fix":"154"},"Update the dependencies array to be: [user]",{"range":"155","text":"156"},"Update the dependencies array to be: [device]",{"range":"157","text":"158"},"Update the dependencies array to be: [device.page, device.selectedType, device.selectedBrand, device]",{"range":"159","text":"160"},"Update the dependencies array to be: [id]",{"range":"161","text":"162"},{"range":"163","text":"158"},[793,795],"[user]",[875,877],"[device]",[1107,1164],"[device.page, device.selectedType, device.selectedBrand, device]",[457,459],"[id]",[747,749]]